// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: calculatorpb/calculator.proto

package calculatorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculatorpbServiceClient is the client API for CalculatorpbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorpbServiceClient interface {
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	SumWithDeadline(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	PrimeNumberDecomposition(ctx context.Context, in *PNDReuqest, opts ...grpc.CallOption) (CalculatorpbService_PrimeNumberDecompositionClient, error)
	Average(ctx context.Context, opts ...grpc.CallOption) (CalculatorpbService_AverageClient, error)
	FindMax(ctx context.Context, opts ...grpc.CallOption) (CalculatorpbService_FindMaxClient, error)
	Square(ctx context.Context, in *SquareRequest, opts ...grpc.CallOption) (*SquareResponse, error)
}

type calculatorpbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorpbServiceClient(cc grpc.ClientConnInterface) CalculatorpbServiceClient {
	return &calculatorpbServiceClient{cc}
}

func (c *calculatorpbServiceClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorpbService/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorpbServiceClient) SumWithDeadline(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorpbService/SumWithDeadline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorpbServiceClient) PrimeNumberDecomposition(ctx context.Context, in *PNDReuqest, opts ...grpc.CallOption) (CalculatorpbService_PrimeNumberDecompositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorpbService_ServiceDesc.Streams[0], "/calculator.CalculatorpbService/PrimeNumberDecomposition", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorpbServicePrimeNumberDecompositionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorpbService_PrimeNumberDecompositionClient interface {
	Recv() (*PNDResponse, error)
	grpc.ClientStream
}

type calculatorpbServicePrimeNumberDecompositionClient struct {
	grpc.ClientStream
}

func (x *calculatorpbServicePrimeNumberDecompositionClient) Recv() (*PNDResponse, error) {
	m := new(PNDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorpbServiceClient) Average(ctx context.Context, opts ...grpc.CallOption) (CalculatorpbService_AverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorpbService_ServiceDesc.Streams[1], "/calculator.CalculatorpbService/Average", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorpbServiceAverageClient{stream}
	return x, nil
}

type CalculatorpbService_AverageClient interface {
	Send(*AverageRequest) error
	CloseAndRecv() (*AverageResponse, error)
	grpc.ClientStream
}

type calculatorpbServiceAverageClient struct {
	grpc.ClientStream
}

func (x *calculatorpbServiceAverageClient) Send(m *AverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorpbServiceAverageClient) CloseAndRecv() (*AverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorpbServiceClient) FindMax(ctx context.Context, opts ...grpc.CallOption) (CalculatorpbService_FindMaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorpbService_ServiceDesc.Streams[2], "/calculator.CalculatorpbService/FindMax", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorpbServiceFindMaxClient{stream}
	return x, nil
}

type CalculatorpbService_FindMaxClient interface {
	Send(*FindMaxRequest) error
	Recv() (*FindMaxResponse, error)
	grpc.ClientStream
}

type calculatorpbServiceFindMaxClient struct {
	grpc.ClientStream
}

func (x *calculatorpbServiceFindMaxClient) Send(m *FindMaxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorpbServiceFindMaxClient) Recv() (*FindMaxResponse, error) {
	m := new(FindMaxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorpbServiceClient) Square(ctx context.Context, in *SquareRequest, opts ...grpc.CallOption) (*SquareResponse, error) {
	out := new(SquareResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorpbService/Square", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorpbServiceServer is the server API for CalculatorpbService service.
// All implementations must embed UnimplementedCalculatorpbServiceServer
// for forward compatibility
type CalculatorpbServiceServer interface {
	Sum(context.Context, *SumRequest) (*SumResponse, error)
	SumWithDeadline(context.Context, *SumRequest) (*SumResponse, error)
	PrimeNumberDecomposition(*PNDReuqest, CalculatorpbService_PrimeNumberDecompositionServer) error
	Average(CalculatorpbService_AverageServer) error
	FindMax(CalculatorpbService_FindMaxServer) error
	Square(context.Context, *SquareRequest) (*SquareResponse, error)
	mustEmbedUnimplementedCalculatorpbServiceServer()
}

// UnimplementedCalculatorpbServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorpbServiceServer struct {
}

func (UnimplementedCalculatorpbServiceServer) Sum(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedCalculatorpbServiceServer) SumWithDeadline(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumWithDeadline not implemented")
}
func (UnimplementedCalculatorpbServiceServer) PrimeNumberDecomposition(*PNDReuqest, CalculatorpbService_PrimeNumberDecompositionServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeNumberDecomposition not implemented")
}
func (UnimplementedCalculatorpbServiceServer) Average(CalculatorpbService_AverageServer) error {
	return status.Errorf(codes.Unimplemented, "method Average not implemented")
}
func (UnimplementedCalculatorpbServiceServer) FindMax(CalculatorpbService_FindMaxServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMax not implemented")
}
func (UnimplementedCalculatorpbServiceServer) Square(context.Context, *SquareRequest) (*SquareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Square not implemented")
}
func (UnimplementedCalculatorpbServiceServer) mustEmbedUnimplementedCalculatorpbServiceServer() {}

// UnsafeCalculatorpbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorpbServiceServer will
// result in compilation errors.
type UnsafeCalculatorpbServiceServer interface {
	mustEmbedUnimplementedCalculatorpbServiceServer()
}

func RegisterCalculatorpbServiceServer(s grpc.ServiceRegistrar, srv CalculatorpbServiceServer) {
	s.RegisterService(&CalculatorpbService_ServiceDesc, srv)
}

func _CalculatorpbService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorpbServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorpbService/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorpbServiceServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorpbService_SumWithDeadline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorpbServiceServer).SumWithDeadline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorpbService/SumWithDeadline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorpbServiceServer).SumWithDeadline(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorpbService_PrimeNumberDecomposition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PNDReuqest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorpbServiceServer).PrimeNumberDecomposition(m, &calculatorpbServicePrimeNumberDecompositionServer{stream})
}

type CalculatorpbService_PrimeNumberDecompositionServer interface {
	Send(*PNDResponse) error
	grpc.ServerStream
}

type calculatorpbServicePrimeNumberDecompositionServer struct {
	grpc.ServerStream
}

func (x *calculatorpbServicePrimeNumberDecompositionServer) Send(m *PNDResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorpbService_Average_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorpbServiceServer).Average(&calculatorpbServiceAverageServer{stream})
}

type CalculatorpbService_AverageServer interface {
	SendAndClose(*AverageResponse) error
	Recv() (*AverageRequest, error)
	grpc.ServerStream
}

type calculatorpbServiceAverageServer struct {
	grpc.ServerStream
}

func (x *calculatorpbServiceAverageServer) SendAndClose(m *AverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorpbServiceAverageServer) Recv() (*AverageRequest, error) {
	m := new(AverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorpbService_FindMax_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorpbServiceServer).FindMax(&calculatorpbServiceFindMaxServer{stream})
}

type CalculatorpbService_FindMaxServer interface {
	Send(*FindMaxResponse) error
	Recv() (*FindMaxRequest, error)
	grpc.ServerStream
}

type calculatorpbServiceFindMaxServer struct {
	grpc.ServerStream
}

func (x *calculatorpbServiceFindMaxServer) Send(m *FindMaxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorpbServiceFindMaxServer) Recv() (*FindMaxRequest, error) {
	m := new(FindMaxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorpbService_Square_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorpbServiceServer).Square(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorpbService/Square",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorpbServiceServer).Square(ctx, req.(*SquareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalculatorpbService_ServiceDesc is the grpc.ServiceDesc for CalculatorpbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculatorpbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalculatorpbService",
	HandlerType: (*CalculatorpbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _CalculatorpbService_Sum_Handler,
		},
		{
			MethodName: "SumWithDeadline",
			Handler:    _CalculatorpbService_SumWithDeadline_Handler,
		},
		{
			MethodName: "Square",
			Handler:    _CalculatorpbService_Square_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeNumberDecomposition",
			Handler:       _CalculatorpbService_PrimeNumberDecomposition_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Average",
			Handler:       _CalculatorpbService_Average_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindMax",
			Handler:       _CalculatorpbService_FindMax_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculatorpb/calculator.proto",
}
